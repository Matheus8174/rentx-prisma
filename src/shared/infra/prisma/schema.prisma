generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Specification {
  id          String               @id @default(uuid()) @db.Uuid
  name        String
  description String
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt
  cars        SpecificationsCars[]

  @@map("specifications")
}

model SpecificationsCars {
  id               String        @id @default(uuid()) @db.Uuid
  car              Car           @relation(fields: [car_id], references: [id])
  car_id           String        @db.Uuid
  specification    Specification @relation(fields: [specification_id], references: [id])
  specification_id String        @db.Uuid
  created_at       DateTime      @default(now())

  @@map("specifications_cars")
}

model Car {
  id             String               @id @default(uuid()) @db.Uuid
  name           String
  description    String
  daily_rate     Decimal
  available      Boolean              @default(true)
  license_plate  String
  fine_amount    Decimal
  brand          String
  created_at     DateTime             @default(now())
  category       Category             @relation(fields: [category_id], references: [id])
  category_id    String               @db.Uuid
  specifications SpecificationsCars[]
  rentals        Rentals[]
  carsImages     CarsImage[]

  @@map("cars")
}

model Rentals {
  id                   String    @id @default(uuid()) @db.Uuid
  car                  Car       @relation(fields: [car_id], references: [id])
  car_id               String    @db.Uuid
  user                 User      @relation(fields: [user_id], references: [id])
  user_id              String    @db.Uuid
  start_date           DateTime  @default(now())
  end_date             DateTime?
  expected_return_date DateTime
  total                Decimal?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  @@map("rentals")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  name           String
  password       String
  email          String    @unique
  driver_license String
  isAdmin        Boolean   @default(false)
  avatar         String?
  created_at     DateTime  @default(now())
  rentals        Rentals[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  cars        Car[]

  @@map("categories")
}

model CarsImage {
  id         String   @id @default(uuid()) @db.Uuid
  cars       Car      @relation(fields: [car_id], references: [id])
  car_id     String   @db.Uuid
  image_name String
  created_at DateTime @default(now())

  @@map("cars_image")
}
