import { faker } from '@faker-js/faker';
import { PrismaClient } from '@prisma/client';

import util from 'util';
import { exec } from 'child_process';

const prismaBinary = './node_modules/.bin/prisma';

const execSync = util.promisify(exec);

export default async () => {
  const prismaClient = new PrismaClient({
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  });

  await prismaClient.$connect();

  await execSync(`${prismaBinary} migrate deploy dev`);

  const data = {
    password: faker.internet.password(),
    id: faker.datatype.uuid(),
    driver_license: faker.lorem.text(),
    email: faker.internet.email(),
    name: faker.name.firstName(),
    avatar: faker.image.imageUrl(),
    created_at: new Date(),
    isAdmin: false
  };

  const n = await prismaClient.user.create({
    data
  });

  console.log(n);
};











  const command = allTables
    .reduce((prev, curr) => `${prev} ${curr},`, 'TRUNCATE')
    .slice(0, -1)
    .concat(' CASCADE;');









  console.log('AAL', allTables);

  const queryToRun = allTables.map(
    (e) => prismaClient.$executeRaw`TRUNCATE ${e}`
  );

  await Promise.all(queryToRun);

  console.log(await prismaClient.$queryRaw`SELECT * FROM categories`);











  const tablesNameRaw: TablesNameRaw = await prismaClient.$queryRaw`
    SELECT table_name
    FROM information_schema.tables
    WHERE table_schema = 'public'
    ORDER BY table_name;
  `;
